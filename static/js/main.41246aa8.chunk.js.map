{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","onSelectTodo","selectedTodoId","className","map","todo","id","title","completed","userId","classNames","type","onClick","TodoFilter","onSelect","onInput","useState","selectedOption","setSelectedOption","query","setQuery","useEffect","value","onChange","event","target","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","resetTodo","user","setUser","getUser","href","email","name","App","setTodos","isLoadingTodos","setIsLoadigTodos","selectedTodo","setSelectedTodo","select","setSelect","input","setInput","handleSelectingTodo","useCallback","loadTodos","a","data","handleSelectedTodos","useMemo","visibleTodos","filter","toLowerCase","includes","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.41246aa8.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todos: Todo[];\n  onSelectTodo: (todo: Todo) => void;\n  selectedTodoId: number | undefined;\n}\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  onSelectTodo,\n  selectedTodoId,\n}) => {\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => {\n          const {\n            id, title, completed, userId,\n          } = todo;\n\n          return (\n            <tr\n              data-cy=\"todo\"\n              className={classNames({\n                'has-background-info-light': selectedTodoId === id,\n              })}\n              key={id}\n            >\n              <td className=\"is-vcentered\">{id}</td>\n              <td className=\"is-vcentered\">\n                {completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n              <td className=\"is-vcentered is-expanded\">\n                <p className={classNames({\n                  'has-text-success': completed,\n                  'has-text-danger': !completed,\n                })}\n                >\n                  {title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => {\n                    onSelectTodo({\n                      id, title, completed, userId,\n                    });\n                  }}\n                >\n                  <span className=\"icon\">\n                    {selectedTodoId === id\n                      ? <i className=\"far fa-eye-slash\" />\n                      : <i className=\"far fa-eye\" />}\n                  </span>\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","// import { Todo } from '../../types/Todo';\n\nimport { useEffect, useState } from 'react';\n\ninterface Props {\n  onSelect: (value: string) => void;\n  onInput: (value: string) => void;\n}\n\nexport const TodoFilter: React.FC<Props> = ({ onSelect, onInput }) => {\n  const [selectedOption, setSelectedOption] = useState('all');\n  const [query, setQuery] = useState('');\n\n  useEffect(() => {\n    onSelect(selectedOption);\n    onInput(query);\n  }, [selectedOption, query]);\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={selectedOption}\n            onChange={\n              (event) => (setSelectedOption(event.target.value))\n            }\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => setQuery(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n\n          {query\n            && (\n              // eslint-disable-next-line jsx-a11y/control-has-associated-label\n              <button\n                data-cy=\"clearSearchButton\"\n                type=\"button\"\n                className=\"delete\"\n                onClick={() => setQuery('')}\n              />\n            )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promime\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see now the laoder works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ninterface Props {\n  resetTodo: () => void;\n  todo: Todo;\n}\n\nexport const TodoModal: React.FC<Props> = ({ resetTodo, todo }) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  const {\n    id, title, completed, userId,\n  } = todo;\n\n  useEffect(() => {\n    if (userId) {\n      getUser(userId)\n        .then(setUser);\n    }\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user\n        ? <Loader />\n        : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${id}`}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={resetTodo}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {completed\n                  ? <strong className=\"has-text-success\">Done</strong>\n                  : <strong className=\"has-text-danger\">Planned</strong> }\n\n                {' by '}\n\n                <a href={`mailto:${user.email}`}>\n                  {user.name}\n                </a>\n              </p>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, {\n  useCallback, useEffect, useState, useMemo,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nimport { Todo } from './types/Todo';\n\nimport { getTodos } from './api';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [isLoadingTodos, setIsLoadigTodos] = useState(false);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [select, setSelect] = useState('all');\n  const [input, setInput] = useState('');\n\n  const handleSelectingTodo = useCallback((todo: Todo) => {\n    setSelectedTodo(todo);\n  }, []);\n\n  const loadTodos = async () => {\n    try {\n      setIsLoadigTodos(true);\n      const data = await getTodos();\n\n      setTodos(data);\n    } finally {\n      setIsLoadigTodos(false);\n    }\n  };\n\n  useEffect(\n    () => {\n      loadTodos();\n    },\n    [],\n  );\n\n  const handleSelectedTodos = useMemo(() => {\n    let visibleTodos: Todo[] = [...todos];\n\n    switch (select) {\n      case 'active':\n        visibleTodos = visibleTodos.filter(todo => todo.completed === false);\n        break;\n\n      case 'completed':\n        visibleTodos = visibleTodos.filter(todo => todo.completed === true);\n        break;\n\n      case 'all':\n      default:\n        break;\n    }\n\n    visibleTodos = visibleTodos.filter(({ title }) => title.toLowerCase().includes(input.toLowerCase()));\n\n    return visibleTodos;\n  }, [select, todos, input]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter onSelect={setSelect} onInput={setInput} />\n            </div>\n\n            <div className=\"block\">\n              {isLoadingTodos\n                ? <Loader />\n                : (\n                  <TodoList\n                    todos={handleSelectedTodos}\n                    onSelectTodo={handleSelectingTodo}\n                    selectedTodoId={selectedTodo?.id}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo\n      && (\n        <TodoModal\n          resetTodo={() => setSelectedTodo(null)}\n          todo={selectedTodo}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}